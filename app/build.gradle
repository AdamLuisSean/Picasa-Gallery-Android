/*
 * Copyright 2017 Alexey Shtanko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// region PLUGINS
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'
// endregion

// region CONSTANTS
final RELEASE = 'release'
final MOCK = 'mock'
final DEV = 'dev'
final RELEASE_PROPERTIES_FILE = 'config/release.properties'
final DEBUG_PROPERTIES_FILE = 'config/debug.properties'
final BUILD_TOOLS_VERSION = '27.0.0'
final COMPILE_SDK_VERSION = 27
final TARGET_SDK_VERSION = 27
final MIN_SDK_VERSION = 14
// endregion

def props = new Properties()
if (rootProject.file(RELEASE_PROPERTIES_FILE).exists()) {
  props.load(new FileInputStream(rootProject.file(RELEASE_PROPERTIES_FILE)))
} else {
  props.load(new FileInputStream(rootProject.file(DEBUG_PROPERTIES_FILE)))
}

static def releaseTime() {
  return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {

  android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
      def outputFile = output.outputFile
      if (outputFile != null && outputFile.name.endsWith('.apk')) {
        def fileName = outputFile.name.replace("app",
            "${defaultConfig.applicationId}_${defaultConfig.versionName}_${releaseTime()}")
        outputFileName = fileName
      }
    }
  }

  compileOptions.incremental = false

  compileSdkVersion COMPILE_SDK_VERSION
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {

    def gitCommitCount = "git rev-list HEAD --first-parent --count".execute().text.toInteger()

    applicationId "io.shtanko.picasagallery"
    targetSdkVersion TARGET_SDK_VERSION
    minSdkVersion MIN_SDK_VERSION
    versionCode gitCommitCount
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  signingConfigs {
    debug {
      storeFile file(props['STORE_FILE'])
      keyAlias props['KEY_ALIAS']
      storePassword props['STORE_PASSWORD']
      keyPassword props['KEY_PASSWORD']
    }

    release {
      storeFile file(props['STORE_FILE'])
      keyAlias props['KEY_ALIAS']
      storePassword props['STORE_PASSWORD']
      keyPassword props['KEY_PASSWORD']
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      zipAlignEnabled true
      shrinkResources true
      pseudoLocalesEnabled true
      debuggable false
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      minifyEnabled false
      debuggable true
      useProguard false
      testCoverageEnabled true
      signingConfig signingConfigs.debug
    }

    foss {
      debuggable false
      signingConfig signingConfigs.release
    }
  }

  productFlavors {
    flavorDimensions "tier"

    dev {}
    mock {}
    prod {}
  }

  lintOptions {
    abortOnError false
    disable 'GoogleAppIndexingWarning'
  }

  sourceSets {
    mock.java.srcDirs += 'src/mock/kotlin'
    prod.java.srcDirs += 'src/prod/kotlin'
    dev.java.srcDirs += 'src/dev/kotlin'
    main.java.srcDirs += 'src/main/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
    androidTest.java.srcDirs += 'src/androidTestMock/kotlin'
    test.java.srcDirs += 'src/test/kotlin'

    main {
      res.srcDirs = ['src/main/res/main',
                     'src/main/res/album',
                     'src/main/res/user',
                     'src/main/res/about',
                     'src/main/res/auth',
                     'src/main/res/resources',
                     'src/main/res']
    }
  }

  // region flavor filter
  def build_param = "${build}"
  def typeName = ''
  def flavorName = ''

  if (build_param != DEV) {
    //exclude dev
    android.variantFilter { variant ->

      typeName = variant.buildType.name
      flavorName = variant.getFlavors().get(0).name

      if ((typeName == RELEASE && flavorName == MOCK) || flavorName == DEV) {
        variant.setIgnore(true)
      }

      if ((flavorName == DEV && typeName == RELEASE) || (flavorName == DEV && typeName == MOCK)) {
        variant.setIgnore(true)
      }
    }
  } else {
    //exclude all but keep dev
    android.variantFilter { variant ->
      typeName = variant.buildType.name
      flavorName = variant.getFlavors().get(0).name

      if ((flavorName == DEV && typeName == RELEASE) || flavorName != DEV) {
        variant.setIgnore(true)
      }

      if (flavorName == DEV && typeName == MOCK) {
        variant.setIgnore(true)
      }
    }
  }
  // endregion

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams = true
    }
  }
}

kapt {
  generateStubs = true
  correctErrorTypes = true
}

apply from: 'dependencies.gradle'
apply from: '../jacoco.gradle'
apply from: '../sonarqube.gradle'
apply plugin: 'com.google.gms.google-services'