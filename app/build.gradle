/*
 * Copyright 2017 Alexey Shtanko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

def props = new Properties()
props.load(new FileInputStream(rootProject.file('config/release.properties')))

android {
  applicationVariants.all { variant ->
    variant.outputs.all { output ->
      def newApkName
      newApkName = output.getOutputFile().name.replace(".apk",
          "-${new Date().format('yyyyMMdd')}-${variant.versionName}-${variant.versionCode}.apk")
      outputFileName = newApkName
    }
  }

  compileOptions.incremental = false

  compileSdkVersion 26
  buildToolsVersion "26.0.1"

  defaultConfig {

    def gitCommitCount = "git rev-list HEAD --first-parent --count".execute().text.toInteger()

    applicationId "io.shtanko.picasagallery"
    targetSdkVersion 26
    minSdkVersion 14
    versionCode gitCommitCount
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  signingConfigs {
    if (props != null &&
        props.containsKey('STORE_FILE') &&
        !props.getProperty('STORE_FILE').isEmpty() &&
        props.containsKey('STORE_PASSWORD') &&
        !props.getProperty('STORE_PASSWORD').isEmpty() &&
        props.containsKey('KEY_ALIAS') &&
        !props.getProperty('KEY_ALIAS').isEmpty() &&
        props.containsKey('KEY_PASSWORD') &&
        !props.getProperty('KEY_PASSWORD').isEmpty()) {

      debug {
        storeFile file(props['STORE_FILE'])
        keyAlias props['KEY_ALIAS']
        storePassword props['STORE_PASSWORD']
        keyPassword props['KEY_PASSWORD']
      }

      release {
        storeFile file(props['STORE_FILE'])
        keyAlias props['KEY_ALIAS']
        storePassword props['STORE_PASSWORD']
        keyPassword props['KEY_PASSWORD']
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      zipAlignEnabled true
      shrinkResources true
      pseudoLocalesEnabled true
      debuggable false
      //signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      minifyEnabled false
      debuggable true
      useProguard false
      //signingConfig signingConfigs.debug
    }

    foss {
      debuggable false
      //signingConfig signingConfigs.release
    }
  }
  flavorDimensions "type"

  productFlavors {
    dev {}
    mock {}
    prod {}
  }

  lintOptions {
    abortOnError false
    disable 'GoogleAppIndexingWarning'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'

    main {
      res.srcDirs = ['src/main/res/main',
                     'src/main/res/album',
                     'src/main/res/user',
                     'src/main/res/collection',
                     'src/main/res/about',
                     'src/main/res/auth',
                     'src/main/res/resources',
                     'src/main/res']
    }
  }

  def build_param = "${build}"

  if (build_param != "dev") {
    //exclude dev
    android.variantFilter { variant ->

      if (variant.buildType.name.equals('release') && variant.getFlavors().
          get(0).name.equals('mock')) {
        variant.setIgnore(true)
      }

      if (variant.getFlavors().get(0).name.equals('dev')) {
        variant.setIgnore(true)
      }
      if (variant.getFlavors().get(0).name.equals('dev') && variant.buildType.name.equals(
          'release')) {
        variant.setIgnore(true)
      }
      if (variant.getFlavors().get(0).name.equals('dev') && variant.buildType.name.equals('mock')) {
        variant.setIgnore(true)
      }
    }
  } else {
    //exclude all but dev
    android.variantFilter { variant ->
      if (variant.getFlavors().get(0).name != 'dev') {
        variant.setIgnore(true)
      }
      if (variant.getFlavors().get(0).name.equals('dev') && variant.buildType.name.equals(
          'release')) {
        variant.setIgnore(true)
      }
      if (variant.getFlavors().get(0).name.equals('dev') && variant.buildType.name.equals('mock')) {
        variant.setIgnore(true)
      }
    }
  }
}

kapt {
  generateStubs = true
  correctErrorTypes = true
}

apply from: 'dependencies.gradle'
apply plugin: 'com.google.gms.google-services'